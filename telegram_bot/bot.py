import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F  
import asyncio
from datetime import datetime, timedelta
from geopy.distance import geodesic


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = "7906038123:AAFBoptu8WtNygQ7wZWMYXFIzEnTwWgPu9g"
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
available_workspaces = [
    {"id": i, "name": f"–ú–µ—Å—Ç–æ {i}", "status": "free", "booked_by": None, "booking_time": None} for i in range(1, 11)
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞")],
            [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ"), KeyboardButton(text="üìç –ß–µ–∫-–∏–Ω/–ß–µ–∫-–∞—É—Ç")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—á–µ–∫-–∏–Ω/—á–µ–∫-–∞—É—Ç)
def get_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫-–∏–Ω", callback_data="checkin")],
        [InlineKeyboardButton(text="‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫-–∞—É—Ç", callback_data="checkout")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def get_location_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    markup = get_main_menu_keyboard()
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
@dp.message(F.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞")
async def show_available_workspaces(message: Message):
    response = ""  # –£–±—Ä–∞–ª–∏ —Ç–µ–∫—Å—Ç "üìã –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç:\n\n"
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç
    for ws in available_workspaces:
        status_emoji = "üü¢" if ws["status"] == "free" else "üî¥"
        booking_info = f" (–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–æ {ws['booking_time']})" if ws["status"] == "booked" else ""
        response += f"{status_emoji} {ws['name']}{booking_info}\n"
    
    response += "\nüü¢ ‚Äî –°–≤–æ–±–æ–¥–Ω–æ\nüî¥ ‚Äî –ó–∞–Ω—è—Ç–æ"
    await message.reply(response, reply_markup=get_main_menu_keyboard())

# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ")
async def book_workspace_handler(message: Message):
    available_workspaces_list = [ws for ws in available_workspaces if ws["status"] == "free"]
    if not available_workspaces_list:
        await message.reply("‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.", reply_markup=get_main_menu_keyboard())
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{ws['id']}. {ws['name']}", callback_data=f"book_{ws['id']}")] for ws in available_workspaces_list
    ])
    await message.reply("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("book_"))
async def select_date(callback: types.CallbackQuery):
    workspace_id = int(callback.data.split("_")[1])
    dates = [
        (datetime.now() + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(15)  # –ë–ª–∏–∂–∞–π—à–∏–µ 15 –¥–Ω–µ–π
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=date, callback_data=f"date_{workspace_id}_{(datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d')}")] 
        for i, date in enumerate(dates)
    ])
    await callback.message.answer(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ {workspace_id} (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("date_"))
async def select_time(callback: types.CallbackQuery):
    _, workspace_id, date = callback.data.split("_")
    times = [
        f"{hour:02}:00" for hour in range(9, 19)  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å 09:00 –¥–æ 18:00 —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=time, callback_data=f"time_{workspace_id}_{date}_{time}")] for time in times
    ])
    formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    await callback.message.answer(f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ {workspace_id} –Ω–∞ {formatted_date}:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("time_"))
async def confirm_booking(callback: types.CallbackQuery):
    _, workspace_id, date, time = callback.data.split("_")
    workspace_id = int(workspace_id)
    start_time = f"{date} {time}:00"
    end_time = (datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S") + timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç–∞ –Ω–∞ "–∑–∞–Ω—è—Ç–æ"
    success = update_workspace_status(workspace_id, "booked", callback.from_user.id, end_time)
    if success:
        formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        formatted_start_time = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        formatted_end_time = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
        await callback.message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ {workspace_id} —Å {formatted_start_time} –¥–æ {formatted_end_time}.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.message.answer("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=get_main_menu_keyboard())

# –ß–µ–∫-–∏–Ω/–ß–µ–∫-–∞—É—Ç
@dp.message(F.text == "üìç –ß–µ–∫-–∏–Ω/–ß–µ–∫-–∞—É—Ç")
async def check_in_out_handler(message: Message):
    await message.reply("üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_inline_keyboard())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@dp.callback_query(F.data == "checkin")
async def check_in(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await callback.message.answer("üìç –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=get_location_keyboard())

@dp.callback_query(F.data == "checkout")
async def check_out(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    for ws in available_workspaces:
        if ws["status"] == "booked" and ws["booked_by"] == user_id:
            ws["status"] = "free"
            ws["booked_by"] = None
            ws["booking_time"] = None
            await callback.message.answer("‚úÖ –ß–µ–∫-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
            return
    await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç.", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.message(F.location)
async def handle_location(message: Message):
    user_location = message.location
    office_location = (47.242352, 39.758100)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ–∏—Å–∞
    distance = geodesic((user_location.latitude, user_location.longitude), office_location).meters

    if distance <= 100:  # –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        await message.answer("üéâ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å–µ. –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("‚ùå –í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ—Ñ–∏—Å–∞.", reply_markup=get_main_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–∞
def update_workspace_status(workspace_id, new_status, user_id, booking_time):
    for ws in available_workspaces:
        if ws["id"] == workspace_id and ws["status"] == "free":
            ws["status"] = new_status
            ws["booked_by"] = user_id
            ws["booking_time"] = booking_time
            return True
    return False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())